---
title: "Homework: Finding Your Way in R and Python"
execute:
  error: true
author: "Dada Zhang"
output: html_document
---

Instructions: Once you have finished this assignment, render the document (Ctrl/Cmd-Shift-K or the Render button). Commit the qmd file and any other files you have changed to the repository and push your changes.

In Canvas, submit a link to your github repository containing the updated files. 

Note: Submitting your link in Canvas lets me know that you are ready for me to grade your homework. You can commit half-finished or not-working homework to GitHub, and it is good practice to commit frequently (at least at the end of each work session). 

# Modes of Execution

Consider the 6 counting words examples in the [textbook module](https://srvanderplas.github.io/stat-computing-r-python/part-tools/04-scripts-notebooks.html#a-short-history-of-talking-to-computers) (they are in 3 separate 'your turn' sections). Look at the code, and then at the information provided for each example. What is different? What is the same? Write 2-3 sentences describing how script mode, interactive mode, and command-line mode differ in R and Python.

---

The **script-mode** provides a sequence of commands in a text file. When working with data, we prefer to combine scripts with the **interactive model** to help us *track* which commands we run (but we run the script interactively). The **command-line** helps to execute the code (line by line or single line) and it does not involve in interactive model.

---


# Programming with Variables

In this section, you'll demonstrate that you understand how to solve simple math problems using code. First, you'll want to define variables to represent the variables in the equation. Give the variables values that can be used to determine the value of the variable on the other side of the `=`. Then, write code to solve the equation for the value of the variable. 

## Pythagorean Theorem in R

$$a^2 + b^2 = c^2$$

Use the chunk below to define variables $a$, $b$, and $c$, where you define the values of $a$ and $b$, and $c$ is determined mathematically. You may need to find the square root function in R to make this work.

```{r pythagorean-theorem-r}
# Your pythagorean theorem code goes here
## Define values of a and b
a <- 3
b <- 4
## Determine c value
c = sqrt(a*a + b*b)
sprintf("c is: %d", c) #sprintf() with integer variable. %f is float

## Try another way: Define a function
PyTh <- function(a, b){
  c <- sqrt(a*a + b*b) #determine c 
}
sprintf("c is: %f",PyTh(1,1))

```

## Quadratic Formula in Python

$$x = \frac{-b \pm \sqrt{b^2 - 4ac}}{2a}$$

Use the chunk below to define variables $a$, $b$, and $c$, and then define $x1$ and $x2$, the possible values for $x$. You may find it helpful to define a few additional variables, such as the value of the discriminant $\sqrt{b^2 - 4ac}$, to make it easier to calculate the results. 

```{python quad-formula-py}
# Your quadratic formula code goes here
def root (a, b, c):
  dis = b*b - 4*a*c ## define discriminant (Ref: The discriminant: two distinct roots)
  
  ## discriminant > 0: two distinct real roots
  if dis > 0:
    x1 = (-b + dis**0.5 )/(2*a) ## define x1 and x2
    x2 = (-b - dis**0.5 )/(2*a)
    return x1, x2
  ## discriminant = 0: one real root
  elif dis == 0:
    x = (-b + 0 )/(2*a)
    return x
  ## discriminant < 0: no real roots
  else:
    return "There is no real root"

## Try 3 conditions example: 
## > 0: 1, 2, -3; 
## = 0: 1, -4, 4; 
## < 0: 1, 3, 3
a = 1
b = 2
c = -3
print("The solution (roots) are : ", root(a,b,c))

a = 1
b = -4
c = 4
print("The solution (roots) are : ", root(a,b,c))

a = 1
b = 3
c = 3
print("The solution (roots) are : ", root(a,b,c))

## Reference
## The discriminant: two distinct roots. https://www.pearson.com/content/dam/one-dot-com/one-dot-com/uk/documents/subjects/mathematics/Worksheets/Chapter2/Example-14-Chapter-2-The-discriminant-two-distinct-roots.pdf
```

# Debugging practice

Look at the data frame below, which contains 3 columns: `Name`, `Salary`, and `Hire.Year`. You've read in this data from the [data file online](https://github.com/unl-statistics/stat850/blob/main/homework/02-data.tsv) and ideally, you want to plot `Hire.Year` on the x-axis and `Salary` on the y-axis (code to do this is provided).

Unfortunately, the data isn't reading in properly. Identify the problem, propose a solution, and try to implement your solution using functions on the R reference card.

Some things you may want to consider: - `gsub`, a "find and replace" function. See more details by typing `?gsub` into the R console. - You can access columns in a data frame using `$`: `df$col1` will get you `col1` of the `df` object. - You can access items in a vector using `[]`: `x[1]` will get you the first item in `x`

Note: You should be able to **identify** the problem given what you know about R from this week's reading. You may not be able to implement a solution without some additional research, so if you don't get that far that's ok.

```{r}
# This line reads in a tab-separated data file with a header naming the columns
salary <- read.table("02-data.tsv", sep = "\t", header = T)

# This code plots labels for each individual at location (x, y)
library(ggplot2)
ggplot(salary, aes(x = Hire.Year, y = Salary, label = Name)) + 
  geom_label()

# This displays the salary object
salary
```

------------------------------------------------------------------------

The problem with the data is:\
The Salary variable has different contents. For example, '$67,872.00' is different from '59083', '54000', and '26309'. Due to the differences in Salary, we cannot display the data correctly in the plot. Additionally, the plot does not show entire information based on the data. For instance, we cannot see the whole name. To solve this issue, we can modify the limits of axes.

Here is how I solved the problem:

```{r cleaning-the-data-r}
# Your implementation code goes here
## First, changes all values in Salary with same format, then plot data.
## Replace xx.00 as with integer value (Ref: see below)
salary$Salary[salary$Salary == "$67,872.00"] <- "67872"
salary
## Plot
ggplot(salary, aes(x = Hire.Year, y = Salary, label = Name, group = 1)) + 
  geom_label() + 
  ## Add title y vs. x
  ggtitle("Salary vs. Hire Year") + 
  ## Center the title
  theme(plot.title = element_text(hjust = 0.5)) +
  ## change axis labels
  labs(x = "Hire Year", y = "Salary (dollar)") +
  ## change grid/limits
  scale_x_continuous(breaks = unique(salary$Hire.Year), limits = c(1994,2004))

```
Reference:

1. Replace all 0 to 0 in a data frame: https://stackoverflow.com/questions/69841991/how-to-replace-all-0-0-to-0-in-a-data-frame

2. Error: `geom_line()`: Each group consists of only one observation. https://stackoverflow.com/questions/27082601/ggplot2-line-chart-gives-geom-path-each-group-consist-of-only-one-observation


```{r cleaning-the-data2-r}
## Another way to solve the problem
## Read data again and make changes on plot
salary <- read.table("02-data.tsv", sep = "\t", header = T)

## Replace xx.00 as with integer value (Ref: see below)
salary$Salary[salary$Salary == "$67,872.00"] <- "$67,872"
## Replace values with new values
salary$Salary <- gsub('54000', '$54,000', 
                      gsub('26309', '$26,309', 
                           gsub('59083', '$59,083', 
                                     salary$Salary)))
#gsub('.*^', '$', obj): adding $ to all values

## Check salary
salary

## Plot
ggplot(salary, aes(x = Hire.Year, y = Salary, label = Name, group = 1)) + 
  geom_label() + 
  ## Add title y vs. x
  ggtitle("Salary vs. Hire year") + 
  ## Center the title
  theme(plot.title = element_text(hjust = 0.5)) + 
  labs(x = "Hire Year", y = "Salary") +
  scale_x_continuous(breaks = seq(1994, 2004, by = 1), limits = c(1994, 2004))
```

```{python figure-py}
# Implementation code in Python
#%pip install package
import pandas as pd
import matplotlib.pyplot as plt
salary = pd.read_csv('02-data.tsv', sep = '\t')
## rename columns
#salary = salary.rename(columns = {'Hire Year': 'Hire_Year'})

## modify differences
#salary.Salary[0] #checking obvious element
salary['Salary'] = salary['Salary'].replace(to_replace = "$67,872.00", value = 67872).astype(int)
print(salary)

y = salary['Salary'].values 
x = salary['Hire Year'].values
z = salary.Name

plt.scatter(x, y)
plt.title("Salary vs. Hire Year")
plt.xlabel("Hire Year")
plt.ylabel("Salary (dollar)")
plt.xlim(1994,2004)
plt.ylim(20000, 70000)
for i in range(len(z)):
    plt.annotate(z[i], (x[i], y[i]))

plt.grid()
plt.show()

```

Reference:

1. Add data labels in a scatter plot using python Matplotlib|Eugene Tsai. Medium. https://medium.com/@marvelouskgc/three-ways-to-add-labels-to-each-data-point-in-a-scatter-plot-in-python-matplotlib-eugene-tsai-42e4094dc07e




